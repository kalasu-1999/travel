<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.LineTeamMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.entity.LineTeam">
    <constructor>
      <idArg column="lineTeam_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="team_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="line_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="go_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="back_date" javaType="java.util.Date" jdbcType="TIMESTAMP" />
      <arg column="adult" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="child" javaType="java.lang.Integer" jdbcType="INTEGER" />
    </constructor>
  </resultMap>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from lineTeam
    where lineTeam_id = #{lineteamId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.LineTeam">
    insert into lineTeam (lineTeam_id, team_id, line_id,
      go_date, back_date, adult, 
      child)
    values (#{lineteamId,jdbcType=INTEGER}, #{teamId,jdbcType=INTEGER}, #{lineId,jdbcType=INTEGER}, 
      #{goDate,jdbcType=TIMESTAMP}, #{backDate,jdbcType=TIMESTAMP}, #{adult,jdbcType=INTEGER}, 
      #{child,jdbcType=INTEGER})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.LineTeam">
    update lineTeam
    set team_id = #{teamId,jdbcType=INTEGER},
      line_id = #{lineId,jdbcType=INTEGER},
      go_date = #{goDate,jdbcType=TIMESTAMP},
      back_date = #{backDate,jdbcType=TIMESTAMP},
      adult = #{adult,jdbcType=INTEGER},
      child = #{child,jdbcType=INTEGER}
    where lineTeam_id = #{lineteamId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select lineTeam_id, team_id, line_id, go_date, back_date, adult, child
    from lineTeam
    where lineTeam_id = #{lineteamId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select lineTeam_id, team_id, line_id, go_date, back_date, adult, child
    from lineTeam
  </select>

  <!--int addPeople(LineTeam record);-->
  <update id="addPeople" parameterType="com.example.demo.entity.LineTeam">
    update lineTeam
    set
      adult = adult + #{adult,jdbcType=INTEGER},
      child = child + #{child,jdbcType=INTEGER}
    where lineTeam_id = #{lineteamId,jdbcType=INTEGER}
  </update>

  <!--List<LineTeam> selectLineTeamByMore(LineTeam record);-->
  <select id="selectLineTeamByMore" resultMap="BaseResultMap">
    select lineTeam_id, team_id, line_id, go_date, back_date, adult, child
    from lineTeam
    <trim prefix="where" suffix="" prefixOverrides="" suffixOverrides="and">
      <if test="lineteamId!=null">
        lineTeam_id = #{lineteamId} and
      </if>
      <if test="teamId!=null">
        team_id = #{teamId} and
      </if>
      <if test="lineId!=null">
        line_id = #{lineId} and
      </if>
      <if test="goDate!=null">
        go_date >= #{goDate} and
      </if>
      <if test="backDate!=null">
        back_date &lt;= #{backDate} and
      </if>
      <if test="adult!=null">
        adult &lt;= #{adult} and
      </if>
      <if test="child!=null">
        child &lt;= #{child} and
      </if>
    </trim>
  </select>

  <!--List<LineTeam> selectByTables(Integer teamId, String bak, Integer lineTeamId, Date goDate, Integer lineId, String lineName, String startPlace, String endPlace, Integer viewId, String viewName);-->
  <select id="selectByTables" resultMap="BaseResultMap">
    select distinct lt.lineTeam_id, lt.team_id, lt.line_id, lt.go_date, lt.back_date, lt.adult, lt.child
    from line l left join lineTeam lt on l.line_id = lt.line_id
    left join team t on lt.team_id = t.team_id
    left join lineViews lv on l.line_id = lv.line_id
    left join views v on lv.view_id = v.view_id
    <trim prefix="where" suffix="" prefixOverrides="" suffixOverrides="and">
      <if test="teamId!=null">
        t.team_id = #{teamId} and
      </if>
      <if test="bak!=null and bak!=''">
        t.bak = #{bak} and
      </if>
      <if test="lineTeamId!=null">
        lt.lineTeam_id = #{lineTeamId} and
      </if>
      <if test="goDate!=null">
        lt.go_date >= #{goDate} and
      </if>
      <if test="lineId!=null">
        l.line_id = #{lineId} and
      </if>
      <if test="lineName!=null and lineName!=''">
        l.line_name = #{lineName} and
      </if>
      <if test="startPlace!=null and startPlace!=''">
        l.start_place = #{startPlace} and
      </if>
      <if test="endPlace!=null and endPlace!=''">
        l.end_place = #{endPlace} and
      </if>
      <if test="viewId!=null">
        v.view_id = #{viewId} and
      </if>
      <if test="viewName!=null and viewName!=''">
        v.view_name = #{viewName} and
      </if>
    </trim>
  </select>
</mapper>