<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.mapper.TeamMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.entity.Team">
    <constructor>
      <idArg column="team_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="company_id" javaType="java.lang.Integer" jdbcType="INTEGER" />
      <arg column="guide1" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="guide2" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="phone" javaType="java.lang.String" jdbcType="VARCHAR" />
      <arg column="bak" javaType="java.lang.String" jdbcType="VARCHAR" />
    </constructor>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from team
    where team_id = #{teamId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.Team">
    insert into team (team_id, company_id, guide1,
      guide2, phone, bak)
    values (#{teamId,jdbcType=INTEGER}, #{companyId,jdbcType=INTEGER}, #{guide1,jdbcType=VARCHAR}, 
      #{guide2,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{bak,jdbcType=VARCHAR})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.Team">
    update team
    set company_id = #{companyId,jdbcType=INTEGER},
      guide1 = #{guide1,jdbcType=VARCHAR},
      guide2 = #{guide2,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      bak = #{bak,jdbcType=VARCHAR}
    where team_id = #{teamId,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select team_id, company_id, guide1, guide2, phone, bak
    from team
    where team_id = #{teamId,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select team_id, company_id, guide1, guide2, phone, bak
    from team
  </select>

  <!--List<Team> selectTeamByMore(Team team);-->
  <select id="selectTeamByMore" parameterType="com.example.demo.entity.Team" resultMap="BaseResultMap">
    select team_id, company_id, guide1, guide2, phone, bak
    from team
    <trim prefix="where" suffix="" prefixOverrides="" suffixOverrides="and">
      <if test="teamId!=null">
        team_id = #{teamId} and
      </if>
      <if test="companyId!=null">
        company_id = #{companyId} and
      </if>
      <if test="guide1!=null and guide1!=''">
        guide1 = #{guide1} and
      </if>
      <if test="guide2!=null and guide2!=''">
        guide2 = #{guide2} and
      </if>
      <if test="phone!=null and phone!=''">
        phone = #{phone} and
      </if>
      <if test="bak!=null and bak!=''">
        bak like '%${bak}%' and
      </if>
    </trim>
  </select>
</mapper>